#!/usr/bin/perl

# ARS-E daemon: ARS Extendable

use strict;
use warnings;

use Data::Dumper;
use YAML::Tiny;
use Digest::MD5 qw(md5_hex);
use JSON;
use POSIX;
use Ham::APRS::IS;
use Ham::APRS::FAP;
use TRBO::NET;
use TRBO::Common;
use TRBO::DupeCache;

#sudo chmod 744 arsed

# used to access the Google gecoding API
use LWP;
use LWP::UserAgent;
use HTTP::Request::Common;
use URI::Escape qw(uri_escape);

# For e-mail sending.
#use Email::Send::SMTP::Gmail;
#use Net::SMTPS;
# use Mail::Webmail::Gmail;

# For Underground weather:
#use Weather::Underground;
# For OpenWeatherMap
use Weather::OpenWeatherMap;

# For personal control.
my $aprs_enable;

my $me = 'arsed';
my $VERSION = '1.50';

my $c;
my @cfgfiles = ( 'tools/arsed.conf', '/usr/local/etc/arsed.conf', '/etc/arsed.conf' );
my @upd_q;

my $is;
my $net;

my $start_time = time();

my $alert_me = "couldn't be $me";

sub dur_str($)
{
    my($s) = @_;
    
    my $str = '';
    
    if ($s < 0) {
        $str = "-";
        $s *= -1;
    }
    
    my $origs = $s;
    
    if ($s < 1) {
        $str .= "0s";
        return $str;
    }
    
    if ($s >= 24 * 60 * 60) {
        my $d = POSIX::floor($s / (24 * 60 * 60));
        $s -= $d * 24 * 60 * 60;
        $str .= $d . 'd ';
    }
    
    if ($s >= 60 * 60) {
        my $d = POSIX::floor($s / (60 * 60));
        $s -= $d * 60 * 60;
        $str .= $d . "h";
    }
    
    if ($s >= 60) {
        my $d = POSIX::floor($s / 60);
        $s -= $d * 60;
        $str .= $d . "m";
    }
    
    if ($s >= 1) {
        if ($origs < 60*60) {
            $str .= POSIX::floor($s) . "s";
        }
    }
    
    return $str;
}

sub reverse_geocode($$)
{
    my($lat, $lng) = @_;
    
    my $ua = LWP::UserAgent->new;
    $ua->agent(
        agent => "$me/$VERSION",
        timeout => 5,
        max_redirect => 0,
    );
    
    my $url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=$lat,$lng&sensor=true&key=YOURKEYGOESHERE";
    
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->simple_request($req);
    
    if ($res->status_line !~ /^(\d+)\s+(.*)$/) {
        warn "reverse_geocode: HTTP status line could not be parsed for " . $url . ": " . $res->status_line;
        return;
    }
                                                                    
    my($status_code, $status_message) = ($1, $2);
    
    if ($status_code ne 200) {
        warn "reverse_geocode: HTTP error $status_code: $status_message - " . $url;
        return;
    }
    
    if ($res->header('Content-Type') !~ /application\/json/) {
        warn "reverse_geocode: Server returned wrong content type (should be application/json): " . $res->header('Content-Type') . " - " . $url;
        return;
    }
    
    my $state = from_json($res->content);
    warn Dumper($state);
    
    return if (!defined $state);
    return if ($state->{'status'} ne 'OK');
    return if (!defined $state->{'results'});
    my @res = @{ $state->{'results'} };
    $res = shift @res;
    return if (!defined $res->{'formatted_address'});
    
    return $res->{'formatted_address'};
}

sub status_msg($)
{
    my($s) = @_;
    
    if ($net && $c->{'arse_status_group'}) {
        $net->{'tms'}->queue_msg($c->{'arse_status_group'}, $s, 1);
    }
}


sub is_config()
{
    $is = new Ham::APRS::IS($c->{'aprsis_server'}, $c->{'callsign'},
        'appid' => "$me $VERSION",
        'passcode' => $c->{'passcode'},
        'filter' => 't/m');
    if (!$is) {
        warn "Failed to create IS server object: " . $is->{'error'} . "\n";
        return;
    }
}

sub is_connect()
{
    my $ret = $is->connect('retryuntil' => 2);
    if (!$ret) {
        warn "Failed to connect to IS server: " . $is->{'error'} . "\n";
        return;
    }
    
    warn "IS: connected\n";
}

sub push_updates()
{
    if (!$is) {
        @upd_q = ();
        return;
    }
    
    if (!$is->connected()) {
        is_connect();
    }
    
    if (!$is->connected()) {
        @upd_q = ();
        return;
    }
    
    foreach my $ent (@upd_q) {
        my $aprs_position = Ham::APRS::FAP::make_position(
            $ent->{'latitude'},
            $ent->{'longitude'},
            -1, # speed
            -1, # course
            -10000, # altitude not used
            (defined $ent->{'symbol'}) ? $ent->{'symbol'} : '/[' # symbol
        );
        #print "$aprs_position\n";

        my $packet = sprintf('%s>APTR01:%s', $ent->{'callsign'}, $aprs_position);
        #print "$packet\n";

	if ($aprs_enable == 1){
            my $ok = $is->sendline($packet);
            if (!$ok) {
                $is->disconnect();
            }
	}
    }
    
    @upd_q = ();
}

sub do_aprsis_beacon($)
{
    my($rx) = @_;
    
    my $reg = $rx->{'registry'};
    
    $reg->{'last_aprsis'} = time();
    $reg->{'last_aprsis_lat'} = $rx->{'latitude'};
    $reg->{'last_aprsis_lng'} = $rx->{'longitude'};
    
    warn "$me: beaconing position of " . $reg->{'id'} . ": " . $reg->{'callsign'} . "\n";
    
    return 1;
}

sub consider_aprsis_beacon($)
{
    my($rx) = @_;
    
    my $reg = $rx->{'registry'};
    
    $reg->{'last_lat'} = $rx->{'latitude'};
    $reg->{'last_lng'} = $rx->{'longitude'};

    # if never beaconed before, do it now
    return do_aprsis_beacon($rx) if (!defined $reg->{'last_aprsis'});
    
    # if very often, don't do it now
    my $since_last = time() - $reg->{'last_aprsis'};
    if ($since_last < 0) {
        # clock has jumped backwards, reset the timer!
        $reg->{'last_aprsis'} = time();
        return 0;
    }
    return 0 if ($since_last < 30);
    
    if (defined $reg->{'last_aprsis_lat'}) {
        my $dist = Ham::APRS::FAP::distance(
            $reg->{'last_aprsis_lng'}, $reg->{'last_aprsis_lat'},
            $rx->{'longitude'}, $rx->{'latitude'});
        if ($dist < 0.05) {
            if ($since_last < 5*60) {
                return 0;
            }
            return do_aprsis_beacon($rx);
        } else {
            return do_aprsis_beacon($rx);
        }
    }
    
    return do_aprsis_beacon($rx);
}

sub process_is_input($)
{
    my($l) = @_;
    
    my %packetdata;
    my $retval = Ham::APRS::FAP::parseaprs($l, \%packetdata);
    
    return if (!$retval);
    if (defined $packetdata{'type'} && $packetdata{'type'} eq 'message') {
        process_is_message(\%packetdata);
    }
}

sub make_ack($$$)
{
    my($src, $dst, $id) = @_;
    return sprintf("%s>APRS::%-9s:ack%s", $src, $dst, $id);
}

my $aprs_msg_cache = new TRBO::DupeCache();
$aprs_msg_cache->init();

sub process_is_message($)
{
    my($p) = @_;
    
    #print "incoming IS message: " . Dumper($p);
    
    my $radio = $net->registry_find_call($p->{'destination'});
    return if (!defined $radio);
    
    my $cacheid;
    if (defined $p->{'messageid'}) {
        $is->sendline(make_ack($p->{'destination'}, $p->{'srccallsign'}, $p->{'messageid'}));
        $cacheid = md5_hex($p->{'srccallsign'} . '_' . $p->{'destination'} . '_' . $p->{'messageid'});
    } else {
        $cacheid = md5_hex($p->{'srccallsign'} . '_' . $p->{'destination'} . '_' . $p->{'message'});
    }
    
    if ($aprs_msg_cache->add($cacheid)) {
        warn "APRS-IS message gateway dupe ignored: IS>TRBO "
            . $p->{'srccallsign'} . '>' . $p->{'destination'} . " " . $radio->{'id'}
            . ((defined $p->{'messageid'}) ? '(id ' . $p->{'messageid'} . ')' : '')
            . ": " . $p->{'message'} . "\n";
        return;
    }
    
    warn "APRS-IS message gateway: IS>TRBO "
        . $p->{'srccallsign'} . '>' . $p->{'destination'} . " " . $radio->{'id'}
        . ": " . $p->{'message'} . "\n";
    
    $net->{'tms'}->queue_msg($radio->{'id'}, 'APRS ' . $p->{'srccallsign'} . ': ' . $p->{'message'});
}

sub dump_state()
{
    return if (!defined $c->{'state_dump'});
    
    my %state = (
        'time' => time(),
        'uptime' => time() - $start_time,
        'ars_clients' => $net->{'ars_clients'},
        'ars_clients_here' => $net->{'ars_clients_here'},
        'tms_q_len' => $net->{'tms'}->{'queue_length'},
        'tms_msg_rx' => $net->{'tms'}->{'msg_rx'},
        'tms_msg_rx_dupe' => $net->{'tms'}->{'msg_rx_dupe'},
        'tms_msg_tx' => $net->{'tms'}->{'msg_tx'},
        'tms_msg_tx_ok' => $net->{'tms'}->{'msg_tx_ok'},
        'tms_msg_tx_group' => $net->{'tms'}->{'msg_tx_group'},
        'tms_msg_tx_drop' => $net->{'tms'}->{'msg_tx_drop'},
        'bytes_rx' => $net->{'bytes_rx'},
        'bytes_tx' => $net->{'ars'}->{'bytes_tx'} + $net->{'tms'}->{'bytes_tx'} + $net->{'loc'}->{'bytes_tx'},
        'pkts_rx' => $net->{'pkts_rx'},
        'pkts_tx' => $net->{'ars'}->{'pkts_tx'} + $net->{'tms'}->{'pkts_tx'} + $net->{'loc'}->{'pkts_tx'},
        'registry' => $net->{'registry'}
    );
    
    my $tmpf = $c->{'state_dump'} . '.tmp';
    if (!open(F, ">", $tmpf)) {
        warn "$alert_me: could not open $tmpf for writing: $!\n";
        return;
    }
    
    if (!print F to_json(\%state)) {
        warn "$alert_me: could not write to $tmpf: $!\n";
        close(F);
        return;
    }
    
    if (!close(F)) {
        warn "$alert_me: could not close $tmpf after writing: $!\n";
        return;
    }
    
    if (!rename($tmpf, $c->{'state_dump'})) {
        warn "$alert_me: could not rename $tmpf to " . $c->{'state_dump'} . ": $!\n";
        return;
    }
}

sub reload_state()
{
    return if (!defined $c->{'state_dump'});
    
    if (!open(F, "<", $c->{'state_dump'})) {
        warn "$alert_me: could not open state dump " . $c->{'state_dump'} . " for reading: $!\n";
        return;
    }
    
    my $l = <F>;
    warn Dumper($l);
    my $state = from_json($l);
    warn Dumper($state);
    
    close(F);
    
    return if (!defined $state->{'registry'});
    
    my $reg = $net->{'registry'};
    foreach my $radio (values %{ $state->{'registry'} }) {
        if (!defined $reg->{$radio->{'id'}}) {
            warn "reload_state: radio " . $radio->{'id'} . " not configured, ignoring\n";
            next;
        }
        warn "reload_state: reloading radio " . $radio->{'id'} . "\n";
        for my $k ('last_poll_tx', 'last_poll_rx', 'first_heard', 'last_heard', 'away_reason', 'state', 'heard_what', 'btext') {
            $reg->{$radio->{'id'}}{$k} = $radio->{$k};
        }
    }
    
    $net->registry_scan(1);
}

##############################################################################################
# APRS
##############################################################################################
sub cmd_aprs($$)
{
    my($rx, $args) = @_;
    #warn "APRS cmd\n";
    
    return if (!$is);
    
    my($cmd, $dst, @words) = @$args;
    
    my $msg = join(' ', @words);
    if (!defined $dst || $dst eq '' || $msg eq '') {
        $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Usage: Aprs <callsign> <message>');
        return;
    }
    
    $dst = uc($dst);
    
    my $aprsmsg = sprintf("%s>APRS::%-9s:%s", $rx->{'registry'}->{'callsign'}, uc($dst), $msg);
    #print "$aprsmsg\n";
    warn "APRS-IS message gateway: TRBO>IS "
        . $rx->{'registry'}->{'callsign'} . '>' . $dst
        . ": $msg\n";
    my $ok = $is->sendline($aprsmsg);
    if (!$ok) {
        warn "Error sending APRS message from " . $rx->{'registry'}->{'callsign'} . "to $dst \n";
        $is->disconnect();
    }
}

##############################################################################################
# Control
##############################################################################################
sub cmd_ctl($$)
{
    my($rx, $args) = @_;
    return if (!$is);
    my($cmd, $dst, @words) = @$args;
    my $msg = join(' ', @words);
    warn "Control message: "
        . $rx->{'registry'}->{'callsign'} . '>' . $dst
        . ": $msg\n";

    if ($rx->{'registry'}->{'id'} eq '3341010') {
	if ($dst eq 'aprs') {
	    $aprs_enable = $msg;
	    $net->{'tms'}->queue_msg(3341010, "APRS Enable = " . $aprs_enable);
	}
    }

}

##############################################################################################
# email
##############################################################################################
sub cmd_email($$)
{
    my($rx, $args) = @_;

    return if (!$is);

    my($cmd, $dst, @words) = @$args;

    my $msg = join(' ', @words);

    warn "e-mail message gateway: "
        . $rx->{'registry'}->{'callsign'} . ' To: ' . $dst
        . " Body: $msg\n";

    my $subject= 'DMR e-mail from: ' . $rx->{'registry'}->{'name'} . ' ' .  $rx->{'registry'}->{'short_callsign'};
    my $body= $msg . "\n" . $rx->{'registry'}->{'name'} . "\n" . $rx->{'registry'}->{'short_callsign'};

    my $mail=Email::Send::SMTP::Gmail->new( -smtp=>'smtp.gmail.com',
	-login=>$rx->{'registry'}->{'email_username'},
        -pass=>$rx->{'registry'}->{'email_password'},
	-layer=>'ssl',
	-port=>465,
#	-verbose=>1,
#	-debug=>1
    );
    $mail->send( -to=>$dst,
	-subject=>$subject,
	-body=>$body,
	-contenttype=>'text/html',
 	-layer=>'ssl',
	-port=>465,
#	-verbose=>1,
#	-debug=>1
    );
    $mail->bye;

    print "email Sent by: $rx->{'registry'}->{'name'} $rx->{'registry'}->{'short_callsign'}.\n";
}

##############################################################################################
#Kill
##############################################################################################
sub cmd_kill($$)
{
    my($rx, $args) = @_;
    #warn "APRS cmd\n";

    return if (!$is);

    my($cmd, $dst, @words) = @$args;

    $net->{'tms'}->queue_msg(3341010, "Radio " . $rx->{'src_id'} . ' killed ARSED.');

    die("Warning: radio " . $rx->{'src_id'} . " killed ARSED.");
}

##############################################################################################
# NOAA
##############################################################################################
sub cmd_noaa($$)
{
    my($rx, $args) = @_;
    return if (!$is);
    my($cmd, @words) = @$args;
    my $msg = join(' ', @words);
    # OpenWeatherMap:
	my $owm_key = 'YOURAPIKEYGOESHERE';
	my $wx = Weather::OpenWeatherMap->new(
	    api_key => $owm_key,
    );
	my $owm_cur = $wx->get_weather(
        location => $msg,
	);
	
    my $w_t = $owm_cur->temp_f;
    my $w_z = $owm_cur->wind_speed_mph.$owm_cur->wind_direction;
    my $w_c = $owm_cur->conditions_terse;
    my $w_d = $owm_cur->humidity;
    #    my $w_f = $wun->feelslike_f;

    my $wmsg = "$w_c -- ".$w_t."F. Wind $w_z. Humidity ".$w_d;
	
    warn "WX report to radio: "
        . $rx->{'registry'}->{'callsign'} . '>'
        . ": $wmsg\n";
    $net->{'tms'}->queue_msg($rx->{'src_id'}, 'WX: ' . $wmsg);
}

##############################################################################################
# Ping
##############################################################################################
sub cmd_ping($$)
{
    my($rx) = @_;
    
    my $datestring = gmtime();
    $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Echo to radio: ' . $rx->{'src_id'} . ' GMT ' . $datestring);
}

##############################################################################################
# SMS
##############################################################################################
sub cmd_sms($$)
{
    my($rx, $args) = @_;
    return if (!$is);
    my($cmd, $dst, @words) = @$args;
    my $msg = join(' ', @words);
    warn "Bulk SMS message gateway: "
	. $rx->{'registry'}->{'callsign'} . '>' . $dst
	. ": $msg\n";

    # This block is from Bulk SMS code samples, Perl version.
    my $ua = LWP::UserAgent->new(timeout => 30);

    # Please see the FAQ regarding HTTPS (port 443) and HTTP (port 80/5567)
    # If your firewall blocks acces to port 5567, you can fall back to port 80:
    # my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net/eapi/submission/send_sms/2/2.0');
    # (See FAQ for more details.)
    #my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net:5567/eapi/submission/send_sms/2/2.0');
    my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net/eapi/submission/send_sms/2/2.0');
    $req->content_type('application/x-www-form-urlencoded');
    $req->content('username=' . $rx->{'registry'}->{'sms_username'} . '&password=' . $rx->{'registry'}->{'sms_password'} . '&msisdn=' . $dst . 
	'&sender=' . $rx->{'registry'}->{'sms_sender_id'} . '&repliable=0' . '&message= ' . $msg .
	" From:$rx->{'registry'}->{'short_callsign'} $rx->{'registry'}->{'sms_reply_phone'}"
    );
    print 'username=' . $rx->{'registry'}->{'sms_username'} . '&password=xxxx' . '&msisdn=' . $dst . 
	'&sender=' . $rx->{'registry'}->{'sms_sender_id'} . '&repliable=0' . '&message=' . $msg .
        " From:" . $rx->{'registry'}->{'short_callsign'} . " " . $rx->{'registry'}->{'sms_reply_phone'} . "\n";

    my $res = $ua->request($req);

   if ($res->is_error) {
        #die "HTTP request error, with error code " . $res->code .
	#	", and body:\n\n" . $res->error_as_HTML;
    }

    my ($result_code, $result_string, $batch_id) = split(/\|/, $res->content);

    if ($result_code eq '0') {
	print "Message sent: batch $batch_id\n";
	$net->{'tms'}->queue_msg($rx->{'src_id'}, 'SMS Sent.');
	$is->disconnect();# This line comes from original arsed.
    }
    else {
	print "Error sending: $result_code: $result_string\n";
#        $net->{'tms'}->queue_msg($rx->{'src_id'}, "SMS Error sending: $result_code: $result_string.");
    }
    print "\n";
    #Bulk SMS block end.
}

#################
###cmd_lastheard
#################
sub cmd_lastheard($$)
{
   my($rx, $args) = @_;
   my($cmd, $dst) = @$args;
   my $now = time();
   my @matches;
   my $match;
   my $s;
        foreach my $radio (values %{ $net->{'registry'} }) {
            my $t = (defined $radio->{'callsign'}) ? $radio->{'callsign'} : $radio->{'id'};
            if (index($radio->{'id'}, $dst) >= 0) {
                $match = $radio;
                push @matches, $t;
                next;
            }
            if (defined $radio->{'callsign'} && index(uc($radio->{'callsign'}), uc($dst)) >= 0) {
                $match = $radio;
                push @matches, $t;
                next;
            }
        }
        if ($#matches > 0) {
            $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Multiple matches: ' . join(' ', @matches));
            return;
        }

            if (defined $match->{'last_heard'}) {
                $s = '' . join(' ', @matches);
                $s .= ' Last Heard at ' . dur_str($now - $match->{'last_heard'});
		$s .= '. Current Status: ' . $match->{'state'};
            }
	    else {
		$s = "Haven't heard " . join(' ', @matches);
	   }

    $net->{'tms'}->queue_msg($rx->{'src_id'}, $s);
}

##############################################################################################
# Get SMS
##############################################################################################
sub cmd_get_sms($$)
{
    my($rx, $args) = @_;
    return if (!$is);
    my($cmd, $dst, @words) = @$args;
    my $msg = join(' ', @words);
    warn "Bulk SMS message gateway: "
        . $rx->{'registry'}->{'callsign'} . '>' . $dst
        . ": $msg\n";

    # This block is from Bulk SMS code samples, Perl version.
    my $ua = LWP::UserAgent->new(timeout => 30);

    # Please see the FAQ regarding HTTPS (port 443) and HTTP (port 80/5567)
    # If your firewall blocks acces to port 5567, you can fall back to port 80:
    # my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net/eapi/submission/send_sms/2/2.0');
    # (See FAQ for more details.)
    #my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net:5567/eapi/submission/send_sms/2/2.0');
    my $req = HTTP::Request->new(POST =>'http://bulksms.vsms.net/eapi/reception/get_inbox/1/1.1');
    $req->content_type('application/x-www-form-urlencoded');
    $req->content('username=' . $rx->{'registry'}->{'sms_username'} . '&password=' . $rx->{'registry'}->{'sms_password'} . '&last_retrieved_id=' . $dst);
    print 'username=' .$rx->{'registry'}->{'sms_username'}  . '&password=xxxx' . '&last_retrieved_id=' . $dst . "\n";

    my $res = $ua->request($req);

    if ($res->is_error) {
        #die "HTTP request error, with error code " . $res->code .
        #       ", and body:\n\n" . $res->error_as_HTML;
    }

    my ($result_code, $status_description, $extra_info, @resp_data) = split(/\|/, $res->content);

    if ($result_code eq '0') {

	my $data = join(' ', @resp_data);

        print $res->content . "\n";
#        $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Last SMS Rx:' $dst);
        $is->disconnect();# This line comes from original arsed.
    }
    else {
        print "Error geting: $result_code: $status_description.\n";
        $net->{'tms'}->queue_msg($rx->{'src_id'}, "SMS Error Getting: $result_code: $status_description.");
    }
    print "\n";
    #Bulk SMS block end.
}

##############################################################################################
# Who
##############################################################################################
sub cmd_who($$)
{
    my($rx, $args) = @_;

    my($cmd, $dst) = @$args;
    
    my $now = time();
    
    if (defined $dst) {
        my @matches;
        my $match;
        foreach my $radio (values %{ $net->{'registry'} }) {
            my $s = (defined $radio->{'callsign'}) ? $radio->{'callsign'} : $radio->{'id'};
            if (index($radio->{'id'}, $dst) >= 0) {
                $match = $radio;
                push @matches, $s;
                next;
            }
            if (defined $radio->{'callsign'} && index(uc($radio->{'callsign'}), uc($dst)) >= 0) {
                $match = $radio;
                push @matches, $s;
                next;
            }
        }
        if (!@matches) {
            $net->{'tms'}->queue_msg($rx->{'src_id'}, 'No match for ' . $dst);
            return;
        }
        if ($#matches > 0) {
            $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Multiple matches: ' . join(' ', @matches));
            return;
        }
        
        my $s = '' . join(' ', @matches);
        if (defined $match->{'last_heard'}) {
            $s .= ' Heard ' . dur_str($now - $match->{'last_heard'});
        }
        if ($match->{'last_loc'} && ($match->{'last_lat'}) && ($match->{'last_lng'})) {
            $s .= ' Loc ' . dur_str($now - $match->{'last_loc'});
            my($addr) = reverse_geocode($match->{'last_lat'}, $match->{'last_lng'});
            $s .= ': ' . $addr if (defined $addr);
            $s .= ' Lat ' . $match->{'last_lat'};
            $s .= ' Lng ' . $match->{'last_lng'};
        }
        
        $net->{'tms'}->queue_msg($rx->{'src_id'}, $s);
        return;
    }
    
    my @here;
    foreach my $radio (sort { $b->{'last_heard'} <=> $a->{'last_heard'} } values %{ $net->{'registry'} }) {
        #warn Dumper($radio);
        if ($radio->{'state'} eq 'here') {
            warn "here: " . Dumper($radio);
            my $s = (defined $radio->{'callsign'}) ? $radio->{'callsign'} : $radio->{'id'};
            if ($now - $radio->{'last_heard'} > $c->{'ars_timeout'}/2) {
                $s = lc($s);
            }
            if (defined $radio->{'last_loc'} && $now - $radio->{'last_loc'} < 15*60 && ($radio->{'last_lat'})) {
                $s .= '*'; 
            }
            push @here, $s;
        }
    }
    
    $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Available: ' . join(' ', @here));
}

##############################################################################################
# send_help
##############################################################################################
sub send_help($)
{
    my($id) = @_;
    
    $net->{'tms'}->queue_msg($id, 'ARS-E Commands: APRS, BText, Last, Sym, SSID, Who, WX');
}

######################
###############
#  cmd_btext
###############
######################
sub cmd_btext($$)
{
    my($rx, $args) = @_;
    my($cmd, @words) = @$args;

    my $btext = join(' ', @words);
    if (!defined $btext || ! @words || $btext eq '') {
        $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Current btext: ' . $rx->{'registry'}->{'btext'});
        return;
    } else {
        $rx->{'registry'}->{'btext'} = $btext;
	$net->{'tms'}->queue_msg($rx->{'src_id'}, 'Set btext to: ' . $btext);
    }
}
######################
###############
#  cmd_aprssymbol
###############
######################
sub cmd_aprssymbol($$)
{
    my($rx, $args) = @_;
    my($cmd, @words) = @$args;

    my $btext = join(' ', @words);
    if (!defined $btext || ! @words || $btext eq '') {
        $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Current APRS symbol: ' . $rx->{'registry'}->{'symbol'});
        return;
    } else {
        if (length($btext) eq 2) {
            $rx->{'registry'}->{'symbol'} = $btext;
            $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Set APRS symbol to: ' . $btext);
        } else {
            $net->{'tms'}->queue_msg($rx->{'src_id'}, 'ERROR: invalid symbol length (not 2 characters)');
        }
    }
}

##################################
##################################
# set SSID
##################################
##################################
sub cmd_ssid($$)
{
    my($rx, $args) = @_;
    my($cmd, @words) = @$args;

    my $ssid = join(' ', @words);
    if (!defined $ssid || ! @words || $ssid eq '') {
        $net->{'tms'}->queue_msg($rx->{'src_id'}, 'Current SSID: ' . $rx->{'registry'}->{'callsign'});
    } else {
	my ($ssid_1, $ssid_2) = split(/-/, $ssid);
	$rx->{'registry'}->{'callsign'} = $ssid;
	$rx->{'registry'}->{'short_callsign'} = $ssid_1;
	$net->{'tms'}->queue_msg($rx->{'src_id'}, 'Set APRS SSID to: ' . $ssid);
    }
}
}

##############################################################################################
# Valid Commands
##############################################################################################
my %cmds = (
    'btext' => \&cmd_btext,
#    'ctl' => \&cmd_ctl,
#    'getmail' => \&cmd_check_email,
#    'email' => \&cmd_email,
#    'e' => \&cmd_email,
    'last' => \&cmd_lastheard,
#    'getsms' => \&cmd_get_sms,
#    'kill' => \&cmd_kill,
#    'noaa' => \&cmd_noaa,
#    'ping' => \&cmd_ping,
    #    'sms' => \&cmd_sms,
    'ssid' => \&cmd_ssid,
    'sym' => \&cmd_aprssymbol,
    'who' => \&cmd_who,
    'w' => \&cmd_who,
    'wx' => \&cmd_noaa,
);


###############################################################################$
# Get email
###############################################################################$
sub cmd_get_email($$)
{
    my($rx, $args) = @_;

    my($cmd, $dst) = @$args;


#    my $gmail = Mail::Webmail::Gmail->new(
#	username => $rx->{'registry'}->{'email_username'}, password=> $rx->{'registry'}->{'email_password'},
#    );
#    my @labels = $gmail->get_labels();
#    my $messages = $gmail->get_messages( label => $labels[0] );
#    foreach ( @{ $messages } ) {
#	if ( $_->{ 'new' } ) {
#            print "Subject: " . $_->{ 'subject' } . " / Blurb: " . $_->{ 'blurb' } . "\n";
#	    $net->{'tms'}->queue_msg($rx->{'src_id'}, 'From ' . $_->{'sender} . ' Subj ' . $_->{'subject'});
#	}
#    }

}


sub process_msg($)
{
    my($rx) = @_;
    
    if ($rx->{'text'} =~ /^\s*([a-z]+)\s*/i) {
        my($cmd) = lc($1);
        
        warn "process_msg cmd '$cmd'\n";
        
        my $t = $rx->{'text'};
        $t =~ s/^\s+//;
        $t =~ s/\s+$//;
        $t =~ s/\s+/ /g;
        my @args = split(' ', $t);
        
        if (defined $cmds{$cmd}) {
            $cmds{$cmd}($rx, \@args);
            return;
        }
    } else {
        warn "process_msg cmd no match\n";
    }
    
    send_help($rx->{'src_id'});
}

sub spool_read($)
{
    my($f) = @_;
    
    if (!open(F, "<", $f)) {
        warn "Could not open $f for reading: $!\n";
        return;
    }
    
    my $dst_l = <F>;
    my $msg = '';
    while (my $l = <F>) {
        $msg .= $l;
    }
    
    if (!close(F)) {
        warn "Could not close $f after reading: $!\n";
        return;
    }
    
    $dst_l =~ s/\s+//gs;
    if ($dst_l !~ /^(\@{0,1})(\d+)$/) {
        warn "Spool file $f contained invalid destination: '$dst_l'\n";
        return;
    }
    my $group_msg = ($1 eq '@') ? 1 : 0;
    my $dst = $2;
    
    $msg =~ s/^\s+//s;
    $msg =~ s/\s+$//s;
    $msg =~ s/\s+/ /gs;
    
    if ($msg eq '') {
        warn "Spool file $f contained empty message\n";
        return;
    }
    
    warn "MSG from spool to $dst_l: $msg\n";
    $net->{'tms'}->queue_msg($dst, $msg, $group_msg);
}

sub scan_spool($)
{
    my($dir) = @_;
    
    opendir(D, $dir) || die "Could not open $dir for reading directory: $!";
    my @files = grep { /\.msg$/ && -f "$dir/$_" } readdir(D);
    closedir(D) || die "Could not close directory $dir: $!";
    
    foreach my $f (@files) {
        my $fp = "$dir/$f";
        warn "processing spool file '$fp'\n";
        spool_read($fp);
        unlink($fp) || die "Could not unlink '$fp' after processing: $!";
    }
}

sub consider_loc_requests()
{
    my $reg = $net->{'registry'};
    
    foreach my $id (keys %{ $reg }) {
        if (defined $reg->{$id}->{'consider_loc_req'} && $reg->{$id}->{'consider_loc_req'} < time()) {
            my $radio = $reg->{$id};
            delete $radio->{'consider_loc_req'};
            next if ($radio->{'state'} ne 'here');
            # loc request configured, check if we have received locs recently
            if (!defined $radio->{'last_loc'} || $radio->{'last_loc'} < time() - 7200) {
                $net->{'loc'}->request_locs($id, $c->{'gps_req_interval'} - 10 + int(rand(30)));
            }
        }
    }

}

##############################################################################################
#### MAIN ####
##############################################################################################
# select which config file is present
my $cfgfile;
foreach my $f (@cfgfiles) {
    if ( -f $f ) {
        $cfgfile = $f;
        last;
    }
}

if (!defined $cfgfile) {
    die "$alert_me: Could not find a configuration file from: @cfgfiles\n";
}

warn "$me: Reading YAML configuration from $cfgfile ...\n";
my $yaml = YAML::Tiny->new;
my $conf = YAML::Tiny->read($cfgfile);
$c = shift @$conf;

warn "Config: " . Dumper($c);

$net = TRBO::NET->new(
    'ars_port' => $c->{'ars_port'},
    'loc_port' => $c->{'loc_port'},
    'tms_port' => $c->{'tms_port'},
    'debug' => 1,
    'cai_net' => $c->{'cai_network'},
    'cai_group_net' => $c->{'cai_group_network'},
    'registry_poll_interval' => $c->{'ars_ping_interval'},
    'registry_timeout' => $c->{'ars_timeout'},
);

# configure radios
while (my $radio = shift @$conf) {
    $net->configure_radio($radio);
}
reload_state();

$aprs_enable = 1;#Default value to upload fixed APRS positions.

if (defined $c->{'aprsis_server'}) {
    is_config();
    # configure APRS commands
    $cmds{'a'} = $cmds{'aprs'} = \&cmd_aprs;
}

status_msg('ARS-E Service started up');

my $is_beacon_int = 19*60 + rand(120);
my $is_next_beacon = time() + 30;

while (1) {
    if ($is) {
        if (!$is->connected()) {
            is_connect();
        }
        
        while (my $is_rx = $is->getline(1)) {
            #print "IS: $is_rx\n";
            next if ($is_rx =~ /^#/);
            process_is_input($is_rx);
        }

        # Ttime sometimes goes backward if ntp jumps or something.
        if (time() > $is_next_beacon || time() < $is_next_beacon - 3*$is_beacon_int) {
            if (defined $c->{'latitude'} && defined $c->{'longitude'} && abs($c->{'latitude'}) > 0.1 && abs($c->{'longitude'}) > 0.1) {
                warn "APRS-IS: beaconing gateway position\n";
                # push my gateway loc
                push @upd_q, {
                    'latitude' => $c->{'latitude'},
                    'longitude' => $c->{'longitude'},
                    'symbol' => $c->{'symbol'},
                    'callsign' => $c->{'callsign'}
                };
                push_updates();
            }
            $is_next_beacon = time() + $is_beacon_int;
        }
    }
    
    # scan for messages which should be sent
    if (defined $c->{'tms_incoming_spool'}) {
        scan_spool($c->{'tms_incoming_spool'});
    }
    
    my $rx = $net->receive();

    if (!$rx) {
        $net->registry_scan();
        $net->{'tms'}->queue_run();
        $aprs_msg_cache->scan(300);
	consider_loc_requests();
        dump_state();
        next;
    }
    #warn Dumper($rx);
    
    if (!defined $rx->{'class'}) {
        # ouch!
        
    } elsif ($rx->{'class'} eq 'ars') {
        if ($rx->{'msg'} eq 'hello') {
            # could have some policy here on what to accept...
            
            # register radio internally and start polling it
	    $net->register_radio($rx);
	    # after 10 minutes, check if we're getting loc packets, and if not,
            # ask for them
            if ($c->{'gps_req_interval'}) {
                $rx->{'registry'}->{'consider_loc_req'} = time() + 600;
            }
        }
        
    } elsif ($rx->{'class'} eq 'loc') {
        if ($rx->{'msg'} eq 'loc' && defined $rx->{'latitude'}) {
            if (!($c->{'gps_req_interval'})) {
                # got loc but not requested - disable
                $net->{'loc'}->request_no_locs($rx->{'src_id'});
            } elsif (defined $rx->{'registry'} && defined $rx->{'registry'}->{'callsign'} && consider_aprsis_beacon($rx)) {

                if ($aprs_enable == 1){
                    push @upd_q,{
                        'latitude' => $rx->{'latitude'},
                        'longitude' => $rx->{'longitude'},
                        'symbol'   => $rx->{'registry'}->{'symbol'},
						'btext'    => $rx->{'registry'}->{'btext'},
                        'callsign' => $rx->{'registry'}->{'callsign'}
                    };
                } else {
                    push @upd_q,{
                        'latitude' => 19.380834,# Test Location.
                        'longitude' => -99.176753,# Test Location.
                        'symbol'   => $rx->{'registry'}->{'symbol'},
						'btext'    => $rx->{'registry'}->{'btext'},
                        'callsign' => $rx->{'registry'}->{'callsign'}
                    };
                }
                push_updates();
            }
        }
        $rx->{'registry'}->{'last_loc'} = time();
        
    } elsif ($rx->{'class'} eq 'tms') {
        if ($rx->{'msg'} eq 'msg') {
            process_msg($rx);
        }
    }
}

